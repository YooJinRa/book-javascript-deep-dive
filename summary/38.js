// 브라우저 렌더링 과정
// 1. html, css, 자바스크립트, 이미지, 폰트 등 렌더링에 필요한 리소스를 서버로부터 응답 받음
// 2. 브라우저 렌더링 엔진은 서버로 부터 응답된 html, css 를 파싱하여 dom, cssom을 생성하고 결합하여 렌더트리 생성
// 3. 브라우저 자바스크립트 엔진은 서버로부터 응답된 자바스크립트를 파싱하여 AST(abstract syntax tree)를 생성하고 바이트 코드로 변환하여 실행
//    이 때, 자바스크립트는 dom api를 통해 dom이나 cssom을 변경 할 수 있음. 변경된 dom과 cssom은 다시 렌더트리로 결합.
// 4. 렌더트리를 기반으로 html요소의 레이아웃을 계산하고 브라우저 화면에 html 요소를 페인팅함.

// -----

// 렌더 트리 : 렌더링을 위한 트리 구조의 자료 구조. 브라우저 화면에 렌더링 되지 않는 노드와 css에 의해 비표시 되는 노드들은 포함하지 않음.

// 렌더링 엔진은 html을 한 줄씩 순차적으로 파싱하며 dom을 생성해 나가다가 자바스크립트 파일을 로드하는 script 태그나 자바스크립트 코드를 콘텐츠로 담은 script 태그를 만나면 dom생성을 일시 중단함. 그리고 script 태그의 src 어트리뷰트에 정의 된 자바스크립트 파일을 서버에 요청하여 로드한 자바스크립트 파일이나 script 태그 내의 자바스크립트 코드를 파싱하기 위해 자바스크립트 엔진에 제어권을 넘김. 자바스크립트 파싱과 실행이 종료되면 렌더링 엔진으로 다시 제어권을 넘겨 html 파싱이 중단된 지점부터 html파싱을 시작하여 dom생성을 재개

// -----

// 자바스크립트 파싱과 실행
// 자바스크립트 소스 코드 - (토크나이저) -> 토큰 - (파서) -> AST - (바이트코드 생성기) -> 바이트코드 -(인터프리터)->
// 토크나이징 :  문법적 의미를 갖는 코드의 최소 단위인 토큰들로 분해
// 파싱 : 토큰들의 집합을 구문분석하여 AST 생성(AST를 사용하면 typescript, babel, prettier같은 트랜스파일러를 구현 할 수 있음)
